// --------------------------------------------------------------------------------------------------------------------
// <copyright file="WeaponHandler.cs" company="X&A Team">
//   Copyright (c) X&A Team. All rights reserved
// </copyright>
// <summary>
//   A class for handling the weapons in the game
// </summary>
// <author>Simen Bekkhus</author>
// --------------------------------------------------------------------------------------------------------------------

namespace ChilledTreat.GameClasses
{
    using System.Linq;

    using Microsoft.Xna.Framework;

    /// <summary>
    /// A class for handling the weapons in the game
    /// </summary>
    public class WeaponHandler
    {
        #region Fields
        /// <summary>
        /// The instance of the weapon-handler
        /// </summary>
        private static WeaponHandler instance;

        /// <summary>
        /// An array of all the weapons
        /// </summary>
        private readonly Weapon[] weapons;

        /// <summary>
        /// The current input-handler
        /// </summary>
        private readonly InputHandler input = InputHandler.Instance;

        /// <summary>
        /// The current weapon
        /// </summary>
        private Weapon currentWeapon;

        /// <summary>
        /// The index of the current weapon in the weapons array
        /// </summary>
        private int currentWeaponIndex;

        /// <summary>
        /// The current gametime
        /// </summary>
        private double currentTime;

        #endregion

        #region Constructor

        /// <summary>
        /// Prevents a default instance of the <see cref="WeaponHandler"/> class from being created.
        /// </summary>
        private WeaponHandler()
        {
            // This demonstrates the power of OOP. To add a weapon, with it's on attributes, simply add it to the
            // list (making sure the name matches a folder in the Weapon folder, to load textures and sounds)
            this.weapons = new[]
                {
                    new Weapon("Minigun", 10000, 1000, 50, true, true), new Weapon("Pistol", 10, 100, 5, false, false),
                    new Weapon("Rifle", 30, 50, 10, true, false)
                };
#if XBOX
            this.ReticulePosition = new Vector2(Game1.GameScreenWidth / 2, Game1.GameScreenHeight / 2);
#endif
            // If godmode is active, use the minigun. If not, use the normal weapon
            if (!Tools.GameConstants.GodMode)
            {
                this.currentWeaponIndex = 1;
            }

            this.currentWeapon = this.weapons[this.currentWeaponIndex];
        }

        #endregion

        #region Properties
        /// <summary>
        /// Gets the instance if the weapon-handler
        /// </summary>
        public static WeaponHandler Instance
        {
            get
            {
                return instance ?? (instance = new WeaponHandler());
            }
        }

        /// <summary>
        /// Gets a value indicating whether or not the current weapon has splash Splash.
        /// </summary>
        public bool Splash
        {
            get
            {
                return this.currentWeapon.Splash;
            }
        }

        /// <summary>
        /// Gets or sets the time when the reload was started
        /// </summary>
        public double StartReloadTime { get; set; }

        /// <summary>
        /// Gets or sets the time when the shooting was started
        /// </summary>
        public double StartShootTime { get; set; }

        /// <summary>
        /// Gets the position of the aiming-reticule
        /// </summary>
        public Vector2 ReticulePosition { get; private set; }

        /// <summary>
        /// Gets the rectangle surrounding the reticule, representing the hit-box generated by a shot
        /// </summary>
        public Rectangle HitBox { get; private set; }
        #endregion

        #region Reset-method
        /// <summary>
        /// Resets all weapons
        /// <remarks>Used when restarting the game</remarks>
        /// </summary>
        public static void ResetWeapons()
        {
            instance = new WeaponHandler();
        }
        #endregion

        #region Update & Draw
        /// <summary>
        /// The update of WeaponHandler
        /// </summary>
        public void Update()
        {
            this.currentTime = FrameInfo.Instance.GameTime.TotalGameTime.TotalMilliseconds;

            // Get the position of the mouse or or the relative position of the gamepad
            this.ReticulePosition = this.input.PointerLocation();

            // Do not allow weapon-swapping while reloading
            if (this.input.IsSwitchWeaponPressed() && Player.Instance.PlayerState != Player.State.Reloading)
            {
                this.ChangeWeapon();
            }

            // If the player is waiting (i.e. not allowed to shoot), check if the player is allowed to fire
            if (this.currentTime - this.StartShootTime > this.currentWeapon.DelayBetweenShots
                && Player.Instance.PlayerState == Player.State.Waiting && Player.Instance.PlayerState != Player.State.Reloading)
            {
                Player.Instance.PlayerState = Player.State.Alive;
            }

            // Keep the aiming reticule on-screen at all times
            if (this.ReticulePosition.X < 0)
            {
                this.ReticulePosition = new Vector2(0, this.ReticulePosition.Y);
            }
            else if (this.ReticulePosition.X > Game1.GameScreenWidth)
            {
                this.ReticulePosition = new Vector2(Game1.GameScreenWidth, this.ReticulePosition.Y);
            }

            if (this.ReticulePosition.Y < 0)
            {
                this.ReticulePosition = new Vector2(this.ReticulePosition.X, 0);
            }
            else if (this.ReticulePosition.Y > Game1.GameScreenHeight)
            {
                this.ReticulePosition = new Vector2(this.ReticulePosition.X, Game1.GameScreenHeight);
            }

            if (Player.Instance.PlayerState == Player.State.Alive &&
                ((this.input.IsShootPressed() && !this.currentWeapon.IsWeaponAutomatic)
                 || (this.input.IsShootDown() && this.currentWeapon.IsWeaponAutomatic)) && !Player.Instance.InCover)
            {
                this.StartShootTime = FrameInfo.Instance.GameTime.TotalGameTime.TotalMilliseconds;

                // Set up a hit-box. Unless splash damage is activated, this isn't used directly
                // The bigger your rate of fire is, the bigger your hit-box will be.
                // If splash is activated, this makes it less probable to hit where you aim
                this.HitBox = new Rectangle(
                    (int)this.ReticulePosition.X - (this.currentWeapon.RateOfFire * 5),
                    (int)this.ReticulePosition.Y - (this.currentWeapon.RateOfFire * 5),
                    this.currentWeapon.RateOfFire * 10,
                    this.currentWeapon.RateOfFire * 10);

                // If splash-damage is used, this sets up a usable hit-box. Inside of the overall hit-box, create a randomly
                // placed hit-box 10x10 pixels within the former hit-box to use for the actual collision test
                if (!this.currentWeapon.Splash)
                {
                    this.HitBox =
                        new Rectangle(
                            GameStates.InGame.Random.Next(this.HitBox.X, this.HitBox.X + this.HitBox.Width),
                            GameStates.InGame.Random.Next(this.HitBox.Y, this.HitBox.Y + this.HitBox.Height),
                            10,
                            10);
                }

                Player.Instance.PlayerState = Player.State.Shooting;
            }

            // Manual reload
            if (this.input.IsReloadPressed() && Player.Instance.PlayerState == Player.State.Alive
                && this.currentWeapon.CurrentAmmo < this.currentWeapon.MaxAmmo)
            {
                Player.Instance.PlayerState = Player.State.Reloading;
                this.StartReloadTime = FrameInfo.Instance.GameTime.TotalGameTime.TotalMilliseconds;
                this.currentWeapon.PlayReloadSound = true;
            }

            if (Player.Instance.PlayerState == Player.State.Shooting)
            {
                this.currentWeapon.Shoot();
            }

            if (Player.Instance.PlayerState == Player.State.Reloading)
            {
                this.currentWeapon.Reload();
            }

            this.currentWeapon.Update();
        }

        /// <summary>
        /// The draw of WeaponHandler
        /// </summary>
        public void Draw()
        {
            this.currentWeapon.Draw();
        }

        #endregion

        #region Methods for changing the current weapon and restarting the instance
        /// <summary>
        /// Changes the current weapon
        /// </summary>
        private void ChangeWeapon()
        {
            // If going to the next weapon takes you out of the array, start over
            if (this.currentWeaponIndex + 1 == this.weapons.Count())
            {
                // If God-mode is activated, allow the use of the god weapon. If not, start at index 1
                this.currentWeaponIndex = Tools.GameConstants.GodMode ? 0 : 1;
            }
            else
            {
                this.currentWeaponIndex++;
            }

            this.currentWeapon = this.weapons[this.currentWeaponIndex];
        }
        #endregion
    }
}